#include <iostream>

/* Прототипы функций. */

void PrintArray(int n, int arr[]);

void InsertionSort(int n, int arr[]);

void Merge(int arr[], int left, int mid, int right);

void MergeSort(int arr[], int l, int r);

void QuickHoarSort(int l, int r, int arr[]);

void QuickLomutoSort(int l, int r, int arr[]);


int main() {
    int n;
    std::cin >> n;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }
//    InsertionSort(n, arr);
//    MergeSort(arr, 0, n);
//    QuickHoarSort(0, n-1, arr);
//    QuickLomutoSort(0,n-1, arr);
    PrintArray(n, arr);
    return 0;
}


void PrintArray(int n, int arr[]) {
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << ' ';
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Сортировка Вставками. */

void InsertionSort(int n, int arr[]) {
    int temp;
    for (int i = 1; i < n; ++i) {
        while (i >= 1 && arr[i] < arr[i - 1]) {
            temp = arr[i - 1];
            arr[i - 1] = arr[i];
            arr[i] = temp;
            i--;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Сортировка слиянием. */

void MergeSort(int arr[], int left, int right) {
    if (left + 1 >= right)
        return;
    int mid = (left + right) / 2;
    MergeSort(arr, left, mid);
    MergeSort(arr, mid, right);
    Merge(arr, left, mid, right);
}

/* Слияние... */

void Merge(int arr[], int left, int mid, int right) {
    int i = 0, j = 0;
    int sarr[right - left];

    while (left + i < mid && mid + j < right) {
        if (arr[left + i] < arr[mid + j]) {
            sarr[i + j] = arr[left + i];
            i++;
        } else {
            sarr[i + j] = arr[mid + j];
            j++;
        }
    }
    while (left + i < mid) {
        sarr[i + j] = arr[left + i];
        i++;
    }
    while (mid + j < right) {
        sarr[i + j] = arr[mid + j];
        j++;
    }

    for (int k = 0; k < (i + j); k++) {
        arr[left + k] = sarr[k];
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Быстрая сортировка. Версия Хоара */

void QuickHoarSort(int l, int r, int arr[]) {
    if (l >= r) {
        return;
    }
    int pivot = arr[(r + l) / 2];
    int i = l;
    int j = r;
    while (i <= j) {
        while (arr[i] < pivot) {
            i++;
        }
        while (arr[j] > pivot) {
            j--;
        }
        if (i <= j) {
            int temp = arr[j];
            arr[j] = arr[i];
            arr[i] = temp;
            i++;
            j--;
        }
    }
    if (l < j) {
        QuickHoarSort(l, j, arr);
    }
    if (r > i) {
        QuickHoarSort(i, r, arr);
    }
}

/* Быстрая сортировка. Версия Ломуто. */

void QuickLomutoSort(int l, int r, int arr[]) {
    if (l >= r){
        return;
    }
    int pivot = arr[r];
    int j = l;
    for (int i = l; i < r; i++) {
        if (arr[i] <= pivot) {
            int temp1 = arr[j];
            arr[j] = arr[i];
            arr[i] = temp1;
            j++;
        }
    }
    int temp2 = arr[j];
    arr[j] = arr[r];
    arr[r] = temp2;
    QuickLomutoSort(l, j-1, arr);
    QuickLomutoSort(j+1, r, arr);
}
